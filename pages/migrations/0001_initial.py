# Generated by Django 4.0.6 on 2022-08-01 22:39

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Option',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('content', models.CharField(max_length=100, verbose_name='選択肢のテキスト (content)')),
                ('effect', models.CharField(blank=True, help_text='以下の２種類のエフェクトが使用可能です（エフェクトは１つだけ設定できます）。<br/>・gotoエフェクト<br/>\u3000このエフェクトは任意の質問へリンクする機能を提供します。ユーザーがこのエフェクトを設定している選択肢を選ぶと、スコアの変更（パフォーマンス測定によるものを含む）を行わずに指定された質問に移ります。<br/>\u3000※リンクされた質問は質問数のカウントの対象になりません。そのため、このエフェクトを多用するとユーザーが記録する際の所要時間が増加します。<br/>\u3000記述例：#goto#1（1は質問のID）<br/>・scoreエフェクト<br/>\u3000このエフェクトはユーザーのメンタルスコアを加算する機能を提供します。ユーザーがこのエフェクトを設定している選択肢を選ぶと、スコアの変更（パフォーマンス測定によるものを含む）を行って質問リストの次の質問に移ります。<br/>\u3000※スコアの加算を行わずに質問リストの次の質問に移るようにしたい場合はエフェクトに何も指定しないでください。<br/>\u3000記述例：#score#5（5は加算するスコア）', max_length=100, verbose_name='選択肢のエフェクト (effect)')),
            ],
            options={
                'verbose_name': '選択式質問の選択肢',
                'verbose_name_plural': '選択式質問の選択肢',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('content', models.CharField(max_length=100, verbose_name='質問文 (content)')),
                ('description', models.TextField(blank=True, max_length=1000, verbose_name='質問の説明文 (description)')),
                ('enabled_when_entry', models.BooleanField(help_text='※使用するにはselection_targetも有効になっている必要があります。', verbose_name='出席時に使用 (enabled_when_entry)')),
                ('enabled_when_leave', models.BooleanField(help_text='※使用するにはselection_targetも有効になっている必要があります。', verbose_name='退席時に使用 (enabled_when_leave)')),
                ('selection_target', models.BooleanField(help_text='※enabled_when_entryまたはenabled_when_leaveが有効になっていないと選択されません。', verbose_name='選択対象にする (selection_target)')),
                ('constantly_first', models.BooleanField(verbose_name='（最初に）必ず使用する (constantly_first)')),
                ('constantly_last', models.BooleanField(verbose_name='（最後に）必ず使用する (constantly_last)')),
            ],
            options={
                'verbose_name': '質問',
                'verbose_name_plural': '質問',
            },
        ),
        migrations.CreateModel(
            name='TemporaryQuestionSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('situation', models.IntegerField()),
                ('questions', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), blank=True, help_text='この値は各質問のIDを使用する順番で並べたものです。', size=None, verbose_name='質問のリスト (questions)')),
            ],
            options={
                'verbose_name': '質問リスト (当日中有効)',
                'verbose_name_plural': '質問リスト (当日中有効)',
            },
        ),
        migrations.CreateModel(
            name='ChoiceQuestion',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='pages.question')),
                ('options', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), help_text='それぞれの選択肢のIDを半角カンマ区切りで入力してください。<br/>例：1,2,3', size=None, verbose_name='選択肢のリスト (options)')),
                ('answer_time_data', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), blank=True, size=None)),
            ],
            options={
                'verbose_name': '選択式質問',
                'verbose_name_plural': '選択式質問',
            },
            bases=('pages.question',),
        ),
        migrations.CreateModel(
            name='InputQuestion',
            fields=[
                ('question_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='pages.question')),
                ('is_number', models.BooleanField(verbose_name='入力値を数値（少数を含む）に限定する (is_number)')),
                ('positive_number_only', models.BooleanField(verbose_name='（is_numberが有効の場合に）負の数の入力を禁止する (positive_number_only)')),
                ('input_box_placeholder', models.CharField(blank=True, max_length=100, null=True, verbose_name='入力欄のプレースホルダー (input_box_placeholder)')),
                ('data_suffix', models.CharField(blank=True, help_text='例：個、人、円', max_length=100, verbose_name='入力値の単位 (data_suffix)')),
                ('record_template', models.CharField(help_text='テンプレートにデータを埋め込んだ値が備考欄に記載されます。テンプレート内の入力値を埋め込みたい場所に「{value}」を入れてください。', max_length=100, verbose_name='入力値記録用テンプレート (record_template)')),
            ],
            options={
                'verbose_name': '入力式質問',
                'verbose_name_plural': '入力式質問',
            },
            bases=('pages.question',),
        ),
        migrations.CreateModel(
            name='AttendanceRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('entry_time', models.DateTimeField(verbose_name='出席時刻 (entry_time)')),
                ('leave_time', models.DateTimeField(blank=True, null=True, verbose_name='退席時刻 (leave_time)')),
                ('mental_score_at_entry', models.IntegerField(blank=True, null=True, verbose_name='出席時のメンタルスコア (mental_score_at_entry)')),
                ('mental_score_at_leave', models.IntegerField(blank=True, null=True, verbose_name='退席時のメンタルスコア (mental_score_at_leave)')),
                ('mental_rank_at_entry', models.CharField(max_length=100, verbose_name='出席時のメンタルランク (mental_rank_at_entry)')),
                ('mental_rank_at_leave', models.CharField(blank=True, max_length=100, verbose_name='退席時のメンタルランク (mental_rank_at_leave)')),
                ('notes', models.TextField(blank=True, verbose_name='備考 (notes)')),
                ('other_service_id', models.CharField(blank=True, help_text='システムで使用します（通常、変更の必要はありません）。', max_length=100, null=True, verbose_name='Airtable レコードID (other_service_id)')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='ユーザー (user)')),
            ],
            options={
                'verbose_name': '出席記録',
                'verbose_name_plural': '出席記録',
            },
        ),
    ]
